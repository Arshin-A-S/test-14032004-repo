{
  "test_run_timestamp": "2025-08-25T17:25:18.121051",
  "test_results": {
    "component_benchmark": {
      "success": true,
      "output": "\ud83e\uddea Performance Benchmark Tool\n========================================\nWarning: Enhanced ensemble model not found (Can't get attribute 'EnsembleAnomalyDetector' on <module '__main__' from '/home/arshinas/Final Year Project Implementation/backend-server/app/benchmarks/performance_benchmark.py'>), falling back to basic model\n\ud83d\ude80 Starting Comprehensive Performance Benchmark...\n\n\ud83d\udd10 Benchmarking Encryption Performance...\n  \ud83d\udcca Testing 1MB files...\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\n    \u2705 1MB: 117.67 MB/sec avg encryption\n  \ud83d\udcca Testing 5MB files...\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\n    \u2705 5MB: 254.56 MB/sec avg encryption\n  \ud83d\udcca Testing 10MB files...\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\nEncrypting AES key with Waters11 policy: role:prof\nNormalized policy: 1\nEncrypting with Waters11 policy: '1', plaintext length: 64\nWaters11 encryption successful, ciphertext type: <class 'dict'>\nNormalized attributes: ['1']\nGenerating Waters11 user secret for attributes: ['1']\nGenerated Waters11 SK type: <class 'dict'>\n    \u2705 10MB: 317.40 MB/sec avg encryption\n\n\ud83e\udd16 Benchmarking FL Scoring Performance...\n\n\u2601\ufe0f Benchmarking S3 Operations...\n  \ud83d\udcca Testing S3 with 1MB files...\n    \u2705 1MB Upload: 0.77 MB/sec\n    \u2705 1MB Download: 1.12 MB/sec\n  \ud83d\udcca Testing S3 with 5MB files...\n    \u2705 5MB Upload: 7.11 MB/sec\n    \u2705 5MB Download: 8.97 MB/sec\n\n\ud83d\udcca Benchmarking False Positive Rate...\n    \ud83d\udcca False Positive Rate: 0.0%\n    \ud83d\udcca True Positive Rate: 0.0%\n    \ud83d\udcca Accuracy: 80.0%\n\n============================================================\n\ud83c\udfaf PERFORMANCE BENCHMARK SUMMARY\n============================================================\n\ud83d\udd10 Encryption (5MB): 254.56 MB/sec\n\ud83d\udd13 Decryption (5MB): 292.19 MB/sec\n\ud83e\udd16 FL Scoring: 9137917 requests/sec\n\u23f1\ufe0f  FL Avg Time: 0.00 ms\n\u2601\ufe0f S3 Upload (5MB): 7.11 MB/sec\n\ud83d\udce5 S3 Download (5MB): 8.97 MB/sec\n\ud83d\udcca False Positive Rate: 0.0%\n\ud83c\udfaf Accuracy: 80.0%\n============================================================\n\n\ud83d\udcc1 Detailed results saved to: benchmarks/results/performance_results_1756142727.json\n\n\u2705 Benchmark completed successfully!\n\n\ud83d\udca1 Use these results in your IEEE paper for:\n   \u2022 Encryption/Decryption throughput metrics\n   \u2022 FL anomaly detection performance\n   \u2022 False positive rate validation\n   \u2022 System scalability analysis\n",
      "errors": ""
    },
    "e2e_benchmark": {
      "success": true,
      "output": "\ud83e\uddea End-to-End Performance Benchmark\n\u26a0\ufe0f  Make sure server is running on http://127.0.0.1:5000\n\ud83d\udd04 Benchmarking Complete Workflow...\n  \ud83d\udcca Testing 1MB end-to-end workflow...\n  \ud83d\udcca Testing 5MB end-to-end workflow...\n  \ud83d\udcca Testing 10MB end-to-end workflow...\n\ud83d\udcc1 Results saved to benchmarks/results/e2e_results.json\n",
      "errors": ""
    },
    "load_test": {
      "success": true,
      "output": "\u26a1 Load Testing Tool\n\u26a0\ufe0f  Make sure server is running!\n\ud83d\ude80 Running Load Test...\n  \ud83d\udd04 Testing 1 concurrent users...\n    \u2705 1 users: 704.0 req/sec, 1.3ms avg\n  \ud83d\udd04 Testing 5 concurrent users...\n    \u2705 5 users: 1176.4 req/sec, 4.0ms avg\n  \ud83d\udd04 Testing 10 concurrent users...\n    \u2705 10 users: 1260.4 req/sec, 7.3ms avg\n  \ud83d\udd04 Testing 20 concurrent users...\n    \u2705 20 users: 1207.2 req/sec, 14.0ms avg\n\ud83d\udcca Load test completed!\n",
      "errors": ""
    }
  }
}